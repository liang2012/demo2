
import static com.googlecode.javacv.cpp.opencv_core.*;
import static com.googlecode.javacv.cpp.opencv_imgproc.*;

import org.opencv.core.Size;
import org.opencv.imgproc.Imgproc;

import com.googlecode.javacv.cpp.opencv_core.CvArr;
import com.googlecode.javacv.cpp.opencv_core.CvPoint2D32f;
import com.googlecode.javacv.cpp.opencv_core.CvSize;
import com.googlecode.javacv.cpp.opencv_core.IplImage;

import static com.googlecode.javacv.cpp.opencv_highgui.*;
import static com.googlecode.javacv.cpp.opencv_core.cvCreateImage;

import com.googlecode.javacv.CanvasFrame;
import com.googlecode.javacv.ImageTransformer;
import com.googlecode.javacv.CanvasFrame;
import com.googlecode.javacv.ImageTransformer;
import com.googlecode.javacv.OpenCVFrameGrabber;
import com.googlecode.javacv.cpp.opencv_core.CvMat;

  class head{
	public static void main (String[] args) {
		 capture();
		
		// IplImage image = cvLoadImage("1.png");
		// int x;
		 canny(1);
		 
		 canny(2);
		 process();
	}
		
		public static void capture(){
			  
			  final OpenCVFrameGrabber grabber = new OpenCVFrameGrabber(0);
		      int i;
		      for(i=1;i<=12;i++)
		      {
			  try {
		            grabber.start();
		             IplImage img = grabber.grab();
		             if (img != null && i==5)
		             {
		 cvFlip(img, img, 1);
		 cvSaveImage("1.png", img);
		 
		             }
		             grabber.start();
		             IplImage img2 = grabber.grab();
		             if (img2 != null && i==9)
		             {
		 cvFlip(img2, img2, 1);
		 cvSaveImage("2.png", img2);
		 
		             }
		         } catch (Exception e)
		         {
		             e.printStackTrace();
		        }
		      }
								}
		
		public static void process(){
			IplImage img = cvLoadImage("1.png");
	        IplImage img1 = cvLoadImage("2.png");
	        
	       // Imgproc.GaussianBlur(img, img1, new Size(15,15),50);
	        int max_corners = 500;
	        CvSize img_sz = cvGetSize(img);


	        IplImage gray = cvCreateImage(img_sz, IPL_DEPTH_8U, 1);
	        IplImage cpy = img.clone();
	        IplImage gray1 = cvCreateImage(img_sz, IPL_DEPTH_8U, 1);
	        IplImage cpy1 = img.clone();

	        cvCvtColor(img, gray, CV_BGR2GRAY);
	        cvCvtColor(img1, gray1, CV_BGR2GRAY);

	        IplImage eig_img = cvCreateImage(img_sz, IPL_DEPTH_32F, 1);
	        IplImage tmp_img = cvCreateImage(img_sz, IPL_DEPTH_32F, 1);
	        
	        int[] corner_count = { max_corners };
	        CvPoint2D32f corners = new CvPoint2D32f(max_corners);
	        double qltyLevel = 0.05;
	        double minDist = 5.0;
	        CvArr mask = null;
	        int blkSize = 3;
	        int useHarris = 1;
	        double k = 0.04;

	        int[] corner_count1 = { max_corners };
	        CvPoint2D32f corners1 = new CvPoint2D32f(max_corners);
	        double qltyLevel1 = 0.002;
	        double minDist1 = 5.0;
	        CvArr mask1 = null;
	        int blkSize1 = 8;
	        int useHarris1 = 0;
	        double k1 = 0.04;
	        cvGoodFeaturesToTrack(gray, eig_img, tmp_img, corners, corner_count, qltyLevel, minDist, mask, blkSize, useHarris, k);
	        cvGoodFeaturesToTrack(gray1, eig_img, tmp_img, corners1, corner_count1, qltyLevel1, minDist1, mask1, blkSize1, useHarris1, k1);
	    //   cvSiftFeatureDetector(gray1, eig_img, tmp_img, corners1, corner_count1, qltyLevel1, minDist1, mask1, blkSize1, useHarris1, k1);
	        if(corner_count[0]-corner_count1[0]<=20){
	        	System.out.println("same" );
	        }
	        else
	        {
	        	System.out.println("not same" );
	        }
		}
		public static void canny(int x){
			IplImage image = cvLoadImage(x+".png");
			
			//create grayscale IplImage of the same dimensions, 8-bit and 1 channel
	        IplImage imageGray = cvCreateImage(cvSize(image.width(), image.height()), IPL_DEPTH_8U, 1);
	        
	        //convert image to grayscale
	        cvCvtColor(image, imageGray, CV_BGR2GRAY );
	         
	        //create canvas frame named 'Demo'
	  //      CanvasFrame canvas = new CanvasFrame("RGB");
	       CanvasFrame canvas2 = new CanvasFrame("Gray"); 
	        //Show image in canvas frame
	       // canvas.showImage(image);
	      canvas2.showImage(imageGray);
			
	        IplImage gray = new IplImage(imageGray);
	        
	        
	        IplImage edge = cvCreateImage(cvSize(gray.width(), gray.height()), IPL_DEPTH_8U, 1);
	        
	        //run Canny edge detection..
	/* if the edges are not seen change the 3 to 5 or 7.. it shows more edges */
	        cvCanny(gray, edge, 150, 240, 3);
	        new CanvasFrame("Edge").showImage(edge); 
	      cvSaveImage(x+".png",edge);
	        
		}

		}
	
  
  
 